// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NomadWork.Infra.Context;

namespace NomadWork.Infra.Migrations
{
    [DbContext(typeof(NomadWorkDbContext))]
    [Migration("20190820124532_MySqlLocal")]
    partial class MySqlLocal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NomadWork.Infra.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(6)");

                    b.Property<string>("Coutry")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,8)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(8,8)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("NomadWork.Infra.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(6)");

                    b.Property<string>("EstablishmmentId");

                    b.Property<short>("HasNotHas");

                    b.Property<short>("ServiceOffered");

                    b.Property<short>("ServiceOfferedQuality");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmmentId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("NomadWork.Infra.Models.Establishmment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(6)");

                    b.Property<string>("AddressId")
                        .IsRequired();

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Establishmment");
                });

            modelBuilder.Entity("NomadWork.Infra.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(6)");

                    b.Property<bool>("Active");

                    b.Property<string>("AddressId")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumberPhone")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("NomadWork.Infra.Models.Characteristic", b =>
                {
                    b.HasOne("NomadWork.Infra.Models.Establishmment")
                        .WithMany("Characteristics")
                        .HasForeignKey("EstablishmmentId");
                });

            modelBuilder.Entity("NomadWork.Infra.Models.Establishmment", b =>
                {
                    b.HasOne("NomadWork.Infra.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NomadWork.Infra.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NomadWork.Infra.Models.User", b =>
                {
                    b.HasOne("NomadWork.Infra.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
